// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceListInfoFull device list info full
//
// swagger:model DeviceListInfoFull
type DeviceListInfoFull struct {

	// code
	Code int64 `json:"code,omitempty"`

	// data
	Data []*DeviceListInfoFullDataItems0 `json:"data"`
}

// Validate validates this device list info full
func (m *DeviceListInfoFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceListInfoFull) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this device list info full based on the context it is used
func (m *DeviceListInfoFull) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceListInfoFull) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceListInfoFull) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceListInfoFull) UnmarshalBinary(b []byte) error {
	var res DeviceListInfoFull
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceListInfoFullDataItems0 device list info full data items0
//
// swagger:model DeviceListInfoFullDataItems0
type DeviceListInfoFullDataItems0 struct {

	// belong
	Belong string `json:"belong,omitempty"`

	// buytime
	Buytime string `json:"buytime,omitempty"`

	// categories
	Categories string `json:"categories,omitempty"`

	// gdzc number
	GdzcNumber string `json:"gdzc_number,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ifmark
	Ifmark string `json:"ifmark,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// position
	Position string `json:"position,omitempty"`

	// sn code
	SnCode string `json:"sn_code,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// yikatong
	Yikatong string `json:"yikatong,omitempty"`
}

// Validate validates this device list info full data items0
func (m *DeviceListInfoFullDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this device list info full data items0 based on context it is used
func (m *DeviceListInfoFullDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceListInfoFullDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceListInfoFullDataItems0) UnmarshalBinary(b []byte) error {
	var res DeviceListInfoFullDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
