// Code generated by go-swagger; DO NOT EDIT.

package shebei

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
)

// PostModifyDeviceURL generates an URL for the post modify device operation
type PostModifyDeviceURL struct {
	Belong     string
	Categorie  string
	Dtype      string
	GdzcNumber string
	ID         string
	Ifmark     string
	Position   string
	Status     string
	Time       string
	Username   string
	Verify     string
	Yikatong   string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *PostModifyDeviceURL) WithBasePath(bp string) *PostModifyDeviceURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *PostModifyDeviceURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *PostModifyDeviceURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/modifyDevice"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	belongQ := o.Belong
	if belongQ != "" {
		qs.Set("belong", belongQ)
	}

	categorieQ := o.Categorie
	if categorieQ != "" {
		qs.Set("categorie", categorieQ)
	}

	dtypeQ := o.Dtype
	if dtypeQ != "" {
		qs.Set("dtype", dtypeQ)
	}

	gdzcNumberQ := o.GdzcNumber
	if gdzcNumberQ != "" {
		qs.Set("gdzc_number", gdzcNumberQ)
	}

	idQ := o.ID
	if idQ != "" {
		qs.Set("id", idQ)
	}

	ifmarkQ := o.Ifmark
	if ifmarkQ != "" {
		qs.Set("ifmark", ifmarkQ)
	}

	positionQ := o.Position
	if positionQ != "" {
		qs.Set("position", positionQ)
	}

	statusQ := o.Status
	if statusQ != "" {
		qs.Set("status", statusQ)
	}

	timeQ := o.Time
	if timeQ != "" {
		qs.Set("time", timeQ)
	}

	usernameQ := o.Username
	if usernameQ != "" {
		qs.Set("username", usernameQ)
	}

	verifyQ := o.Verify
	if verifyQ != "" {
		qs.Set("verify", verifyQ)
	}

	yikatongQ := o.Yikatong
	if yikatongQ != "" {
		qs.Set("yikatong", yikatongQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *PostModifyDeviceURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *PostModifyDeviceURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *PostModifyDeviceURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on PostModifyDeviceURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on PostModifyDeviceURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *PostModifyDeviceURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
