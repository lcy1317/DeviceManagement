// Code generated by go-swagger; DO NOT EDIT.

package shebei

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPostModifyDeviceParams creates a new PostModifyDeviceParams object
//
// There are no default values defined in the spec.
func NewPostModifyDeviceParams() PostModifyDeviceParams {

	return PostModifyDeviceParams{}
}

// PostModifyDeviceParams contains all the bound params for the post modify device operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostModifyDevice
type PostModifyDeviceParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	Belong string
	/*
	  Required: true
	  In: query
	*/
	Categorie string
	/*
	  Required: true
	  In: query
	*/
	Dtype string
	/*
	  Required: true
	  In: query
	*/
	GdzcNumber string
	/*
	  Required: true
	  In: query
	*/
	ID string
	/*
	  Required: true
	  In: query
	*/
	Ifmark string
	/*
	  Required: true
	  In: query
	*/
	Position string
	/*
	  Required: true
	  In: query
	*/
	Status string
	/*
	  Required: true
	  In: query
	*/
	Time string
	/*
	  Required: true
	  In: query
	*/
	Username string
	/*
	  Required: true
	  In: query
	*/
	Verify string
	/*
	  Required: true
	  In: query
	*/
	Yikatong string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostModifyDeviceParams() beforehand.
func (o *PostModifyDeviceParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qBelong, qhkBelong, _ := qs.GetOK("belong")
	if err := o.bindBelong(qBelong, qhkBelong, route.Formats); err != nil {
		res = append(res, err)
	}

	qCategorie, qhkCategorie, _ := qs.GetOK("categorie")
	if err := o.bindCategorie(qCategorie, qhkCategorie, route.Formats); err != nil {
		res = append(res, err)
	}

	qDtype, qhkDtype, _ := qs.GetOK("dtype")
	if err := o.bindDtype(qDtype, qhkDtype, route.Formats); err != nil {
		res = append(res, err)
	}

	qGdzcNumber, qhkGdzcNumber, _ := qs.GetOK("gdzc_number")
	if err := o.bindGdzcNumber(qGdzcNumber, qhkGdzcNumber, route.Formats); err != nil {
		res = append(res, err)
	}

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qIfmark, qhkIfmark, _ := qs.GetOK("ifmark")
	if err := o.bindIfmark(qIfmark, qhkIfmark, route.Formats); err != nil {
		res = append(res, err)
	}

	qPosition, qhkPosition, _ := qs.GetOK("position")
	if err := o.bindPosition(qPosition, qhkPosition, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	qTime, qhkTime, _ := qs.GetOK("time")
	if err := o.bindTime(qTime, qhkTime, route.Formats); err != nil {
		res = append(res, err)
	}

	qUsername, qhkUsername, _ := qs.GetOK("username")
	if err := o.bindUsername(qUsername, qhkUsername, route.Formats); err != nil {
		res = append(res, err)
	}

	qVerify, qhkVerify, _ := qs.GetOK("verify")
	if err := o.bindVerify(qVerify, qhkVerify, route.Formats); err != nil {
		res = append(res, err)
	}

	qYikatong, qhkYikatong, _ := qs.GetOK("yikatong")
	if err := o.bindYikatong(qYikatong, qhkYikatong, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBelong binds and validates parameter Belong from query.
func (o *PostModifyDeviceParams) bindBelong(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("belong", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("belong", "query", raw); err != nil {
		return err
	}
	o.Belong = raw

	return nil
}

// bindCategorie binds and validates parameter Categorie from query.
func (o *PostModifyDeviceParams) bindCategorie(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("categorie", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("categorie", "query", raw); err != nil {
		return err
	}
	o.Categorie = raw

	return nil
}

// bindDtype binds and validates parameter Dtype from query.
func (o *PostModifyDeviceParams) bindDtype(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("dtype", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("dtype", "query", raw); err != nil {
		return err
	}
	o.Dtype = raw

	return nil
}

// bindGdzcNumber binds and validates parameter GdzcNumber from query.
func (o *PostModifyDeviceParams) bindGdzcNumber(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("gdzc_number", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("gdzc_number", "query", raw); err != nil {
		return err
	}
	o.GdzcNumber = raw

	return nil
}

// bindID binds and validates parameter ID from query.
func (o *PostModifyDeviceParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("id", "query", raw); err != nil {
		return err
	}
	o.ID = raw

	return nil
}

// bindIfmark binds and validates parameter Ifmark from query.
func (o *PostModifyDeviceParams) bindIfmark(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ifmark", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("ifmark", "query", raw); err != nil {
		return err
	}
	o.Ifmark = raw

	return nil
}

// bindPosition binds and validates parameter Position from query.
func (o *PostModifyDeviceParams) bindPosition(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("position", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("position", "query", raw); err != nil {
		return err
	}
	o.Position = raw

	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *PostModifyDeviceParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("status", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("status", "query", raw); err != nil {
		return err
	}
	o.Status = raw

	return nil
}

// bindTime binds and validates parameter Time from query.
func (o *PostModifyDeviceParams) bindTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("time", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("time", "query", raw); err != nil {
		return err
	}
	o.Time = raw

	return nil
}

// bindUsername binds and validates parameter Username from query.
func (o *PostModifyDeviceParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("username", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("username", "query", raw); err != nil {
		return err
	}
	o.Username = raw

	return nil
}

// bindVerify binds and validates parameter Verify from query.
func (o *PostModifyDeviceParams) bindVerify(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("verify", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("verify", "query", raw); err != nil {
		return err
	}
	o.Verify = raw

	return nil
}

// bindYikatong binds and validates parameter Yikatong from query.
func (o *PostModifyDeviceParams) bindYikatong(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("yikatong", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("yikatong", "query", raw); err != nil {
		return err
	}
	o.Yikatong = raw

	return nil
}
